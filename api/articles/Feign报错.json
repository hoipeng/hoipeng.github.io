{"title":"Feign报错","uid":"970f7f1adf4d90e614a9db3caafa2ba6","slug":"Feign报错","date":"2022-12-23T03:08:58.000Z","updated":"2022-12-23T03:16:55.515Z","comments":true,"path":"api/articles/Feign报错.json","keywords":null,"cover":null,"content":"<h1 id=\"Feign报错feign-RetryableException-too-many-bytes-written-executing-乔一I的博客-CSDN博客-too-many-bytes-written-executing\"><a href=\"#Feign报错feign-RetryableException-too-many-bytes-written-executing-乔一I的博客-CSDN博客-too-many-bytes-written-executing\" class=\"headerlink\" title=\"Feign报错feign.RetryableException: too many bytes written executing_乔一I的博客-CSDN博客_too many bytes written executing\"></a>Feign报错feign.RetryableException: too many bytes written executing_乔一I的博客-CSDN博客_too many bytes written executing</h1><p>Created: December 23, 2022 11:04 AM<br>URL: <a href=\"https://blog.csdn.net/qq_39986681/article/details/107138740?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromBaidu~Rate-1-107138740-blog-106431593.pc_relevant_vip_default&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromBaidu~Rate-1-107138740-blog-106431593.pc_relevant_vip_default&amp;utm_relevant_index=1\">https://blog.csdn.net/qq_39986681/article/details/107138740?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-107138740-blog-106431593.pc_relevant_vip_default&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-107138740-blog-106431593.pc_relevant_vip_default&amp;utm_relevant_index=1</a></p>\n<p>版本:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>SpringCloud : 2021.0.4</p>\n<p>SpringBoot : 2.7.3</p>\n<p>SpringCloudAlibaba : 2021.0.4.0</p></blockquote>\n<p>百度到body是跟<code>Content-Length</code> 有关系的… 附上博主链接 <a href=\"https://my.oschina.net/u/4410077/blog/3323588\">https://my.oschina.net/u/4410077/blog/3323588</a> 因为服务之间调用需要携带一些用户信息之类的 所以实现了Feign的<code>RequestInterceptor</code>拦截器复制请求头，复制的时候是所有头都复制的,可能导致Content-length长度跟body不一致. 所以只需要判断如果是Content-length就跳过</p>\n<p>原配置 :</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;**\n * @author Joe\n * createTime 2020&#x2F;06&#x2F;10 18:13\n *&#x2F;\n@Log4j2\n@Configuration\npublic class FeignConfiguration implements RequestInterceptor &#123;\n\n    @Override\n    public void apply(RequestTemplate template) &#123;\n        ServletRequestAttributes attributes &#x3D; (ServletRequestAttributes) RequestContextHolder\n                .getRequestAttributes();\n        HttpServletRequest request &#x3D; attributes.getRequest();\n        Enumeration&lt;String&gt; headerNames &#x3D; request.getHeaderNames();\n        if (headerNames !&#x3D; null) &#123;\n            while (headerNames.hasMoreElements()) &#123;\n                String name &#x3D; headerNames.nextElement();\n                String values &#x3D; request.getHeader(name);\n                template.header(name, values);\n            &#125;\n        &#125; else &#123;\n            log.info(&quot;feign interceptor error header:&#123;&#125;&quot;, template);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n\n<p>修改之后:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;**\n * @author Joe\n * createTime 2020&#x2F;06&#x2F;10 18:13\n *&#x2F;\n@Log4j2\n@Configuration\npublic class FeignConfiguration implements RequestInterceptor &#123;\n\n    @Override\n    public void apply(RequestTemplate template) &#123;\n        ServletRequestAttributes attributes &#x3D; (ServletRequestAttributes) RequestContextHolder\n                .getRequestAttributes();\n        HttpServletRequest request &#x3D; attributes.getRequest();\n        Enumeration&lt;String&gt; headerNames &#x3D; request.getHeaderNames();\n        if (headerNames !&#x3D; null) &#123;\n            while (headerNames.hasMoreElements()) &#123;\n                String name &#x3D; headerNames.nextElement();\n                String values &#x3D; request.getHeader(name);\n                &#x2F;&#x2F; 跳过 content-length\n                if (name.equals(&quot;content-length&quot;))&#123;\n                    continue;\n                &#125;\n                template.header(name, values);\n            &#125;\n        &#125; else &#123;\n            log.info(&quot;feign interceptor error header:&#123;&#125;&quot;, template);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n\n<p>content-length详解参考文章 ：<a href=\"https://juejin.im/post/5d772cb4e51d453b5f1a0502\">https://juejin.im/post/5d772cb4e51d453b5f1a0502</a></p>\n","feature":true,"text":"Feign报错feign.RetryableException: too many bytes written executing_乔一I的博客-CSDN博客_too many bytes written executingCreated: December 23, 2022 1...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"程序猿🐒","slug":"程序猿🐒","count":14,"path":"api/categories/程序猿🐒.json"}],"tags":[{"name":"Feign","slug":"Feign","count":1,"path":"api/tags/Feign.json"},{"name":"Spring Cloud","slug":"Spring-Cloud","count":1,"path":"api/tags/Spring-Cloud.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Feign%E6%8A%A5%E9%94%99feign-RetryableException-too-many-bytes-written-executing-%E4%B9%94%E4%B8%80I%E7%9A%84%E5%8D%9A%E5%AE%A2-CSDN%E5%8D%9A%E5%AE%A2-too-many-bytes-written-executing\"><span class=\"toc-text\">Feign报错feign.RetryableException: too many bytes written executing_乔一I的博客-CSDN博客_too many bytes written executing</span></a></li></ol>","author":{"name":"慎独丶九思","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"君子慎独，不欺暗室。<br />卑以自牧，含章可贞。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Debian安装podman","uid":"2ca528413d98d2a6052186d4e6e5f17c","slug":"Debian安装podman","date":"2022-12-27T05:27:05.000Z","updated":"2022-12-27T05:43:38.105Z","comments":true,"path":"api/articles/Debian安装podman.json","keywords":null,"cover":[],"text":"安装Podman Podman 软件包包含在 Debian 11 默认存储库中，只需运行以下命令即可安装它: apt-get install podman -y 安装完成后查看版本号 podman --version 查看podman更多信息 root@debian-gnu-li...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"程序猿🐒","slug":"程序猿🐒","count":14,"path":"api/categories/程序猿🐒.json"}],"tags":[],"author":{"name":"慎独丶九思","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"君子慎独，不欺暗室。<br />卑以自牧，含章可贞。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"MySQL创建定时器","uid":"35f9da2ff904b5c3201ae1ff19769ee3","slug":"MySQL创建定时器","date":"2022-12-07T12:00:00.000Z","updated":"2022-12-07T12:15:07.434Z","comments":true,"path":"api/articles/MySQL创建定时器.json","keywords":null,"cover":[],"text":"1. 介绍 在开发过程中经常会遇到这样一个问题：每天或者每月必须定时去执行一条sql语句或更新或删除或执行特定的sql语句。 注意: mysql定时器是从mysql5.1开始的，如果你的mysql版本低于5.1，那就不能使用mysql定时器 2. 开启定时器 MySQL定时器默认...","link":"","photos":[],"count_time":{"symbolsCount":823,"symbolsTime":"1 mins."},"categories":[{"name":"程序猿🐒","slug":"程序猿🐒","count":14,"path":"api/categories/程序猿🐒.json"},{"name":"数据库","slug":"程序猿🐒/数据库","count":2,"path":"api/categories/程序猿🐒/数据库.json"},{"name":"MySQL","slug":"程序猿🐒/数据库/MySQL","count":1,"path":"api/categories/程序猿🐒/数据库/MySQL.json"}],"tags":[{"name":"MySQL","slug":"MySQL","count":2,"path":"api/tags/MySQL.json"},{"name":"数据库","slug":"数据库","count":1,"path":"api/tags/数据库.json"}],"author":{"name":"慎独丶九思","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"君子慎独，不欺暗室。<br />卑以自牧，含章可贞。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}